
     The package module:


 This module provide an interfaces needed to handle configuration
packages, i.e. containers for files with configuration options.

 The main interfaces are the following:
   - ProfileStorage(filename, directory):
     opens or create an object containing configuration options.
     If the file pointed to by filename does not exist, then it is
     assumed a new package is to be created.
   - ProfileStorage.install([directory]):
     assuming this is not a new package, the configuration options
     contained in the package are installed, by default from the
     home of the curent user, or from the directory passed as an
     optional argument.
     This is as much as possible implemented as an atomic operation
     to avoid half applied options in case of errors.
   - ProfileStorage.add_file(file, handler, description):
     Add a file to the list of configuration, the file should be a
     relative path from the home directory. If the file is already
     present in the archive, it will just update the metadata with
     the handler and the description for the file. The handler is the
     name of the configuration manager, or the empty string if if is a
     raw file. Note that this does not update the archive at that
     point, just add it to the metadata
   - ProfileStorage.delete_file(file):
     this is the pending operation to add_file(), it will remove the
     metadata associated to that file entry (but won't update the archive
     yet). Returns -1 in case of error.
   - ProfileStorage.update_all(log, [directory]):
     Commit the changes to all the entries in the package, it will update
     only modified files, adding the associated log in the metadata
     This is as much as possible implemented as an atomic operation
   - ProfileStorage.get_directory():
     return the current directory used by a storage object

 Missing interfaces TBD:
   - metadata extractions routines: per file, or common
   - update entry for a single file (or a specified set)

Daniel Veillard
$Id$
