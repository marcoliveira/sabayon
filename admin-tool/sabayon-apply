#!/usr/bin/env python
# -*- mode: python -*-
#
# Copyright (C) 2005 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# Exit codes from this program:
#
# 0 - Success
# 
# 1 - A fatal error occurred, and the user profile may not have been applied completely.
#
# 2 - One or more recoverable errors ocurred while applying the profile.
#
# If you get an exit code of 1 or 2, please report a bug at
# http://bugzilla.gnome.org/enter_bug.cgi?product=sabayon
# and include the ~/sabayon-debug-log-YYYY-MM-DD-HH-MM-SS.txt as an attachment
# in your bug report.


if __name__ == '__main__':
    import sys
    
    from sabayon import util
    from sabayon import userdb

    EXIT_CODE_FATAL = 1
    EXIT_CODE_RECOVERABLE = 2

    try:
        util.init_gettext ()

        # FIXME: argument handling sucks.
        # Add --log-config=/tmp/sabayon-tmp-blahblah/sabayon-debug-log.conf (mode 0444)

        is_sabayon_session = False
        if len (sys.argv) >= 2:
            if sys.argv[1] == "-s":
                is_sabayon_session = True
                sys.argv = sys.argv[:1] + sys.argv[2:]

        if len (sys.argv) == 1:
            user_name = util.get_user_name ()
            profile_name = userdb.get_database().get_profile (user_name)
            if not profile_name:
                sys.stderr.write (_("No profile for user '%s' found\n") % user_name)
                sys.exit (1)
        elif len (sys.argv) == 2:
            profile_name = sys.argv[1]
        else:
            sys.stderr.write (_("Usage: %s [<profile-name>]\n") % sys.argv[0])
            sys.exit (1)

        from sabayon import userprofile

        def dprint (fmt, *args):
            util.debug_print (util.DEBUG_ADMINTOOL, fmt % args)

        dprint ("Applying profile '%s' for user '%s'",
                profile_name, util.get_user_name ())

        profile = userprofile.UserProfile (profile_name)
        profile.apply (is_sabayon_session)

        dprint ("Finished applying profile '%s' for user '%s'",
                profile_name, util.get_user_name ())

        if errors.errors_have_recoverable_error ():
            debuglog.debug_log (True, debuglog.DEBUG_LOG_DOMAIN_SABAYON_APPLY,
                                "There were recoverable errors while applying the profile.")

        # We are a helper program, so we *always* dump the log, since
        # the caller program will know what to do with it:
        # "sabayon-session" will pass it on to the parent "sabayon";
        # xinitrc will log it to ~/.xsession-errors, etc.
        debuglog.debug_log_dump_to_stderr ("~/sabayon-debug-log.conf") # FIXME: what's the real config filename?

        if errors.errors_have_recoverable_error ():
            sys.exit (EXIT_CODE_RECOVERABLE)
        # else exit normally (exit code 0)
    except:
        debuglog.debug_log (True, debuglog.DEBUG_LOG_DOMAIN_SABAYON_APPLY,
                            "Fatal exception!  Exiting abnormally.")
        debuglog.debug_log_current_exception (debuglog.DEBUG_LOG_DOMAIN_SABAYON_APPLY)
        debuglog.debug_log_dump_to_stderr ("~/sabayon-debug-log.conf") # FIXME: what's the real config filename?
        sys.exit (EXIT_CODE_FATAL)
